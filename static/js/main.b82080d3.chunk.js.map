{"version":3,"sources":["logo.svg","components/Sandbox.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Sandbox","props","canvasRef","React","createRef","canvas","this","current","ctx","getContext","width","window","innerWidth","height","innerHeight","balls","Ball","x","y","velX","velY","color","size","random","min","max","Math","floor","spawnBalls","ball","push","maxBalls","spawnCount","prototype","draw","beginPath","fillStyle","arc","PI","fill","update","collisionDetect","j","length","dx","dy","sqrt","splice","loop","fillRect","i","requestAnimationFrame","setInterval","console","log","className","classname","ref","Component","App","src","logo","alt","href","target","rel","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b82080d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport './Sandbox.css';\r\n\r\nclass Sandbox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // setup canvas\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    // context.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    var width = canvas.width = window.innerWidth;\r\n    var height = canvas.height = window.innerHeight;\r\n\r\n    // easy check of viewport resolution\r\n    // const view = (width + ' x ' + height);\r\n\r\n    // All balls forever!\r\n    const balls = [];\r\n\r\n    // Ball Constructor\r\n    function Ball(x, y, velX, velY, color, size) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.velX = velX;\r\n      this.velY = velY;\r\n      this.color = color;\r\n      this.size = size;\r\n    }\r\n\r\n    Ball.maxBalls = 100;\r\n    Ball.spawnCount = 0;\r\n\r\n    // ###########################\r\n    // Functions!!!\r\n    // ###########################\r\n\r\n    // function to generate random number\r\n    function random(min,max) {\r\n      var num = Math.floor(Math.random()*(max-min)) + min;\r\n      return num;\r\n    }\r\n    Ball.prototype.draw = function() {\r\n      ctx.beginPath();\r\n      ctx.fillStyle = this.color;\r\n      ctx.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\r\n      ctx.fill();\r\n    }\r\n\r\n    // Calc Window Edge Collision for balls\r\n    Ball.prototype.update = function() {\r\n      if ((this.x + this.size) >= width) {\r\n        this.velX = -(this.velX);\r\n      }\r\n\r\n      if ((this.x - this.size) <= 0) {\r\n        this.velX = -(this.velX);\r\n      }\r\n\r\n      if ((this.y + this.size) >= height) {\r\n        this.velY = -(this.velY);\r\n      }\r\n\r\n      if ((this.y - this.size) <= 0) {\r\n        this.velY = -(this.velY);\r\n      }\r\n\r\n      this.x += this.velX;\r\n      this.y += this.velY;\r\n    }\r\n\r\n    Ball.prototype.collisionDetect = function() {\r\n      for (var j = 0; j < balls.length; j++) {\r\n        if (!(this === balls[j])) { // sphere collision check\r\n          var dx = this.x - balls[j].x;\r\n          var dy = this.y - balls[j].y;\r\n          var distance = Math.sqrt(dx * dx + dy * dy);\r\n          \r\n          if (distance < this.size + balls[j].size) {\r\n            \r\n            if (balls.length < Ball.maxBalls) {\r\n              while (Ball.spawnCount < 5) {\r\n                Ball.spawnCount += 1;\r\n                let ball = new Ball(\r\n                  balls[j].x,\r\n                  balls[j].y,\r\n                  random(-7,7), // X axis velocity\r\n                  random(-7,7), // Y axis velocity\r\n                  'rgb(' + random(0,255) + ',' + random(0,255) + ',' + random(0,255) +')',\r\n                  random(1,30) // Ball size range in px\r\n                );\r\n                balls.push(ball);\r\n              }\r\n            }\r\n\r\n            balls[j].color = this.color = 'rgb(' + random(0, 255) + ',' + random(0, 255) + ',' + random(0, 255) +')';\r\n            balls.splice(j,1);\r\n            Ball.spawnCount = 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function spawnBalls() { // Spawn random balls\r\n      var ball = new Ball(\r\n        random(0,width),\r\n        random(0,height),\r\n        random(-7,7), // X axis velocity\r\n        random(-7,7), // Y axis velocity\r\n        'rgb(' + random(0,255) + ',' + random(0,255) + ',' + random(0,255) +')',\r\n        random(5,50) // Ball size range in px\r\n      );\r\n      balls.push(ball);\r\n    }\r\n\r\n    // Animation Loop\r\n    function loop() {\r\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.25)';  // draws new window background. Last param adjusts transparency\r\n      ctx.fillRect(0, 0, width, height);\r\n\r\n      while (balls.length < 10) { // max number of balls at a time\r\n        spawnBalls();\r\n      }\r\n\r\n      for (var i = 0; i < balls.length; i++) {  // renders new ball positions\r\n        balls[i].draw();\r\n        balls[i].update();\r\n        balls[i].collisionDetect();\r\n      }\r\n\r\n      requestAnimationFrame(loop); // loops each new frame\r\n    }\r\n\r\n    function countOrbs() {\r\n      console.log('Orbs count:', balls.length);\r\n    }\r\n\r\n    // #######################\r\n    // Function calls\r\n    // #######################\r\n\r\n    loop();\r\n\r\n    setInterval(countOrbs, 2000);\r\n\r\n\r\n    // ============================================\r\n\r\n    // const script = document.createElement('script');\r\n    // script.async = true;\r\n    // script.src = Sandbox;\r\n    \r\n    // For the head\r\n    // document.head.appendChild(script);\r\n    \r\n    // For the body\r\n    // document.body.appendChild(script);\r\n  }\r\n    \r\n  render() {\r\n    return (\r\n      <div className=\"Sandbox\">\r\n        <h1 classname=\"hero-title\">Stellarium - Jay Silvas</h1>\r\n        <canvas ref={this.canvasRef} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sandbox;\r\n","import React from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport Sandbox from './Sandbox';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n        A revival of <strong>Stellar</strong> in React.js explore emergent dynamics\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://jaysilvas.dev/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          More Projects\n        </a>\n      </header>\n      <Sandbox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}